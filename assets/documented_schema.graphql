"Represents various blockchain networks."
enum Network {
  "Arbitrum One network, a layer 2 scaling solution for Ethereum."
  ARBITRUM_ONE
  "Arweave Mainnet, a decentralized storage network."
  ARWEAVE_MAINNET
  "Aurora network, an Ethereum Virtual Machine (EVM) on the NEAR Protocol."
  AURORA
  "Avalanche network, a platform for decentralized applications and custom blockchain networks."
  AVALANCHE
  "Base network, a layer 2 solution for Ethereum."
  BASE
  "Boba network, a layer 2 scaling solution for Ethereum."
  BOBA
  "Binance Smart Chain (BSC), a blockchain network for running smart contract-based applications."
  BSC
  "Celo network, a blockchain platform focused on mobile-first decentralized applications."
  CELO
  "Cosmos network, an ecosystem of interconnected blockchains."
  COSMOS
  "Cronos network, a blockchain network for decentralized finance (DeFi) applications."
  CRONOS
  "Ethereum Mainnet, the primary public Ethereum blockchain."
  MAINNET
  "Fantom network, a fast, scalable blockchain for digital assets and dApps."
  FANTOM
  "Fuse network, a blockchain platform for open-source finance."
  FUSE
  "Harmony network, a blockchain platform for decentralized applications."
  HARMONY
  "Juno network, a decentralized, permissionless smart contract network."
  JUNO
  "Moonbeam network, an Ethereum-compatible smart contract platform on Polkadot."
  MOONBEAM
  "Moonriver network, a community-led sister parachain on Kusama."
  MOONRIVER
  "NEAR Mainnet, a scalable blockchain network for decentralized applications."
  NEAR_MAINNET
  "Optimism network, a layer 2 scaling solution for Ethereum."
  OPTIMISM
  "Osmosis network, a decentralized exchange for Cosmos-based tokens."
  OSMOSIS
  "Polygon (Matic) network, a protocol and framework for building and connecting Ethereum-compatible blockchain networks."
  MATIC
  "xDai network, a stable payment blockchain designed for fast and inexpensive transactions."
  XDAI
}

"Represents different types of protocols in the system."
enum ProtocolType {
  "Represents a protocol type that facilitates the exchange of assets."
  EXCHANGE
  "Represents a protocol type that involves lending and borrowing activities."
  LENDING
  "Represents a protocol type focused on generating yield or returns on assets."
  YIELD
  "Represents a protocol type that enables the transfer of assets across different networks."
  BRIDGE
  "Represents a generic protocol type that does not fit into the other specified categories."
  GENERIC
}

"Description for enum type: TokenType"
enum TokenType {
  "Represents multiple token types or standards."
  MULTIPLE
  "Represents an unknown or unspecified token type."
  UNKNOWN
  "Represents the ERC20 token standard, commonly used for fungible tokens on the Ethereum blockchain."
  ERC20
  "Represents the ERC721 token standard, commonly used for non-fungible tokens (NFTs) on the Ethereum blockchain."
  ERC721
  "Represents the ERC1155 token standard, which supports both fungible and non-fungible tokens on the Ethereum blockchain."
  ERC1155
  "Represents the BEP20 token standard, used for fungible tokens on the Binance Smart Chain."
  BEP20
  "Represents the BEP721 token standard, used for non-fungible tokens (NFTs) on the Binance Smart Chain."
  BEP721
  "Represents the BEP1155 token standard, which supports both fungible and non-fungible tokens on the Binance Smart Chain."
  BEP1155
}

"Represents a token entity with various attributes related to its state and value."
type Token @entity @regularPolling {
  "Unique identifier for the token, represented as a byte array."
  id: Bytes!
  "The name of the token."
  name: String!
  "The symbol associated with the token, typically a short abbreviation."
  symbol: String!
  "The number of decimal places the token uses."
  decimals: Int!
  "The most recent price of the token in USD."
  lastPriceUSD: BigDecimal
  "The block number at which the last price was recorded."
  lastPriceBlockNumber: BigInt
  "Internal reference to the last price pool, represented as a byte array."
  _lastPricePool: Bytes
  "The total supply of the token."
  _totalSupply: BigInt!
  "The total value locked in USD, representing the total value of assets held."
  _totalValueLockedUSD: BigDecimal!
  "Buffer value used to handle large price changes."
  _largePriceChangeBuffer: Int!
  "Buffer value used to handle large impacts on total value locked."
  _largeTVLImpactBuffer: Int!
}

"Represents the type of reward token, indicating the context in which the reward is applicable."
enum RewardTokenType {
  "Indicates a reward token associated with deposit activities."
  DEPOSIT
  "Indicates a reward token associated with borrow activities."
  BORROW
}

"Represents a reward token entity that is immutable and uses regular polling."
type RewardToken @entity(immutable: true) @regularPolling {
  "Unique identifier for the reward token, represented as a byte array."
  id: Bytes!
  "Reference to the associated token entity."
  token: Token!
  "Specifies the type of reward token, using the RewardTokenType enum."
  type: RewardTokenType!
}

"Enum type representing various fee types associated with liquidity pools."
enum LiquidityPoolFeeType {
  "A fixed fee applied to trading activities within the liquidity pool."
  FIXED_TRADING_FEE
  "A tiered fee structure applied to trading activities, potentially varying based on volume or other criteria."
  TIERED_TRADING_FEE
  "A dynamic fee applied to trading activities, which may change based on market conditions or other factors."
  DYNAMIC_TRADING_FEE
  "A fixed fee charged to liquidity providers for their participation in the pool."
  FIXED_LP_FEE
  "A dynamic fee charged to liquidity providers, potentially varying based on pool performance or other metrics."
  DYNAMIC_LP_FEE
  "A fixed fee collected by the protocol for its services or infrastructure."
  FIXED_PROTOCOL_FEE
  "A dynamic fee collected by the protocol, which may adjust based on usage or other conditions."
  DYNAMIC_PROTOCOL_FEE
  "A fee charged when depositing assets into the liquidity pool."
  DEPOSIT_FEE
  "A fee charged when withdrawing assets from the liquidity pool."
  WITHDRAWAL_FEE
}

"Represents a fee structure associated with a liquidity pool."
type LiquidityPoolFee @entity @regularPolling {
  "Unique identifier for the liquidity pool fee."
  id: Bytes!
  "Percentage of the fee applied to the liquidity pool."
  feePercentage: BigDecimal
  "Category or nature of the liquidity pool fee."
  feeType: LiquidityPoolFeeType!
}

"Represents a protocol with various attributes and metrics."
interface Protocol {
  "Unique identifier for the protocol, represented as bytes."
  id: Bytes!
  "Name of the protocol."
  name: String!
  "Slug or URL-friendly identifier for the protocol."
  slug: String!
  "Version of the schema used by the protocol."
  schemaVersion: String!
  "Version of the subgraph associated with the protocol."
  subgraphVersion: String!
  "Version of the methodology applied to the protocol."
  methodologyVersion: String!
  "Network on which the protocol operates."
  network: Network!
  "Type of the protocol, defined by the ProtocolType enum."
  type: ProtocolType!
  "Total value locked in the protocol, measured in USD."
  totalValueLockedUSD: BigDecimal!
  "Value controlled by the protocol, measured in USD."
  protocolControlledValueUSD: BigDecimal
  "Cumulative revenue generated on the supply side, measured in USD."
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "Cumulative revenue generated on the protocol side, measured in USD."
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "Total cumulative revenue generated, measured in USD."
  cumulativeTotalRevenueUSD: BigDecimal!
  "Total number of unique users interacting with the protocol."
  cumulativeUniqueUsers: Int!
  "Total number of pools associated with the protocol."
  totalPoolCount: Int!
  "Daily snapshots of usage metrics, derived from the protocol."
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  "Hourly snapshots of usage metrics, derived from the protocol."
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]! @derivedFrom(field: "protocol")
  "Daily snapshots of financial metrics, derived from the protocol."
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

"Represents a decentralized exchange automated market maker protocol."
type DexAmmProtocol implements Protocol @entity @regularPolling {
  "Unique identifier for the protocol, represented as a byte array."
  id: Bytes!
  "The name of the protocol."
  name: String!
  "A URL-friendly version of the protocol name, often used in links."
  slug: String!
  "The version of the schema used by the protocol."
  schemaVersion: String!
  "The version of the subgraph associated with the protocol."
  subgraphVersion: String!
  "The version of the methodology applied to the protocol."
  methodologyVersion: String!
  "The blockchain network on which the protocol operates."
  network: Network!
  "The type of protocol, indicating its specific category."
  type: ProtocolType!
  "The total value locked in the protocol, measured in USD."
  totalValueLockedUSD: BigDecimal!
  "The total liquidity available in the protocol, measured in USD."
  totalLiquidityUSD: BigDecimal!
  "The active liquidity currently being utilized in the protocol, measured in USD."
  activeLiquidityUSD: BigDecimal!
  "The value of protocol-side assets that have not been collected, measured in USD."
  uncollectedProtocolSideValueUSD: BigDecimal!
  "The value of supply-side assets that have not been collected, measured in USD."
  uncollectedSupplySideValueUSD: BigDecimal!
  "The value of assets controlled by the protocol, measured in USD."
  protocolControlledValueUSD: BigDecimal
  "The cumulative trading volume processed by the protocol, measured in USD."
  cumulativeVolumeUSD: BigDecimal!
  "The cumulative revenue generated for liquidity providers, measured in USD."
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "The cumulative revenue generated for the protocol itself, measured in USD."
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "The total cumulative revenue generated by the protocol, measured in USD."
  cumulativeTotalRevenueUSD: BigDecimal!
  "The total number of unique users who have interacted with the protocol."
  cumulativeUniqueUsers: Int!
  "The total number of unique liquidity providers who have participated in the protocol."
  cumulativeUniqueLPs: Int!
  "The total number of unique traders who have executed trades on the protocol."
  cumulativeUniqueTraders: Int!
  "The total number of liquidity pools available in the protocol."
  totalPoolCount: Int!
  "The number of open positions currently active in the protocol."
  openPositionCount: Int!
  "The total number of positions that have been opened in the protocol."
  cumulativePositionCount: Int!
  "The ID of the last daily snapshot taken for the protocol."
  lastSnapshotDayID: Int!
  "The timestamp of the last update made to the protocol data."
  lastUpdateTimestamp: BigInt!
  "The block number of the last update made to the protocol data."
  lastUpdateBlockNumber: BigInt!
  "Daily snapshots of usage metrics for the protocol, derived from the protocol field."
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  "Hourly snapshots of usage metrics for the protocol, derived from the protocol field."
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]! @derivedFrom(field: "protocol")
  "Daily snapshots of financial metrics for the protocol, derived from the protocol field."
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
  "A list of liquidity pools associated with the protocol, derived from the protocol field."
  pools: [LiquidityPool!]! @derivedFrom(field: "protocol")
  "Indicates whether the protocol has undergone a regenesis event."
  _regenesis: Boolean!
}

"Entity representing daily usage metrics for a decentralized exchange automated market maker."
type UsageMetricsDailySnapshot @entity @dailySnapshot {
  "Unique identifier for the daily snapshot."
  id: Bytes!
  "The day for which the metrics are recorded, represented as an integer."
  day: Int!
  "Reference to the protocol associated with the usage metrics."
  protocol: DexAmmProtocol!
  "Number of unique users active on the protocol during the day."
  dailyActiveUsers: Int!
  "Total number of unique users who have interacted with the protocol up to and including the current day."
  cumulativeUniqueUsers: Int!
  "Total number of transactions processed by the protocol during the day."
  dailyTransactionCount: Int!
  "Total number of liquidity pools available on the protocol as of the current day."
  totalPoolCount: Int!
  "Number of deposit transactions made on the protocol during the day."
  dailyDepositCount: Int!
  "Number of withdrawal transactions made on the protocol during the day."
  dailyWithdrawCount: Int!
  "Number of swap transactions executed on the protocol during the day."
  dailySwapCount: Int!
  "Timestamp indicating when the snapshot was recorded."
  timestamp: BigInt!
  "Block number at which the snapshot was recorded."
  blockNumber: BigInt!
}

"Entity representing a snapshot of usage metrics collected on an hourly basis."
type UsageMetricsHourlySnapshot @entity @hourlySnapshot {
  "Unique identifier for the snapshot, represented as a byte array."
  id: Bytes!
  "The hour of the day (0-23) for which the metrics are recorded."
  hour: Int!
  "Reference to the decentralized exchange automated market maker protocol associated with the metrics."
  protocol: DexAmmProtocol!
  "Number of unique users who were active during the specified hour."
  hourlyActiveUsers: Int!
  "Total number of unique users who have interacted with the protocol up to and including the specified hour."
  cumulativeUniqueUsers: Int!
  "Total number of transactions that occurred during the specified hour."
  hourlyTransactionCount: Int!
  "Number of deposit transactions that occurred during the specified hour."
  hourlyDepositCount: Int!
  "Number of withdrawal transactions that occurred during the specified hour."
  hourlyWithdrawCount: Int!
  "Number of swap transactions that occurred during the specified hour."
  hourlySwapCount: Int!
  "Unix timestamp representing the exact time the snapshot was taken."
  timestamp: BigInt!
  "Block number in the blockchain at which the snapshot was recorded."
  blockNumber: BigInt!
}

"Represents a daily snapshot of financial metrics for a decentralized exchange automated market maker."
type FinancialsDailySnapshot @entity(immutable: true) @dailySnapshot {
  "Unique identifier for the financial snapshot."
  id: Bytes!
  "The day number for which the snapshot is taken, typically represented as an integer."
  day: Int!
  "Reference to the decentralized exchange protocol associated with this snapshot."
  protocol: DexAmmProtocol!
  "Total value locked in USD across the protocol at the time of the snapshot."
  totalValueLockedUSD: BigDecimal!
  "Total liquidity in USD available in the protocol at the time of the snapshot."
  totalLiquidityUSD: BigDecimal!
  "Active liquidity in USD that is currently being utilized in the protocol."
  activeLiquidityUSD: BigDecimal!
  "Value in USD of protocol-side assets that have not yet been collected."
  uncollectedProtocolSideValueUSD: BigDecimal!
  "Value in USD of supply-side assets that have not yet been collected."
  uncollectedSupplySideValueUSD: BigDecimal!
  "Value in USD controlled by the protocol itself."
  protocolControlledValueUSD: BigDecimal
  "Total volume in USD traded on the protocol during the day."
  dailyVolumeUSD: BigDecimal!
  "Cumulative volume in USD traded on the protocol up to the snapshot day."
  cumulativeVolumeUSD: BigDecimal!
  "Revenue in USD earned by liquidity providers during the day."
  dailySupplySideRevenueUSD: BigDecimal!
  "Cumulative revenue in USD earned by liquidity providers up to the snapshot day."
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "Revenue in USD earned by the protocol during the day."
  dailyProtocolSideRevenueUSD: BigDecimal!
  "Cumulative revenue in USD earned by the protocol up to the snapshot day."
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "Total revenue in USD earned by both the protocol and liquidity providers during the day."
  dailyTotalRevenueUSD: BigDecimal!
  "Cumulative total revenue in USD earned by both the protocol and liquidity providers up to the snapshot day."
  cumulativeTotalRevenueUSD: BigDecimal!
  "Timestamp indicating when the snapshot was recorded."
  timestamp: BigInt!
  "Block number on the blockchain at which the snapshot was recorded."
  blockNumber: BigInt!
}

"Description for table: LiquidityPool"
type LiquidityPool @entity @regularPolling {
  "Description for column: id"
  id: Bytes!
  "Description for column: protocol"
  protocol: DexAmmProtocol!
  "Description for column: name"
  name: String
  "Description for column: symbol"
  symbol: String
  "Description for column: liquidityToken"
  liquidityToken: Token
  "Description for column: liquidityTokenType"
  liquidityTokenType: TokenType
  "Description for column: inputTokens"
  inputTokens: [Token!]!
  "Description for column: rewardTokens"
  rewardTokens: [RewardToken!]
  "Description for column: fees"
  fees: [LiquidityPoolFee!]!
  "Description for column: isSingleSided"
  isSingleSided: Boolean!
  "Description for column: createdTimestamp"
  createdTimestamp: BigInt!
  "Description for column: createdBlockNumber"
  createdBlockNumber: BigInt!
  "Description for column: tick"
  tick: BigInt
  "Description for column: totalValueLockedUSD"
  totalValueLockedUSD: BigDecimal!
  "Description for column: totalLiquidity"
  totalLiquidity: BigInt!
  "Description for column: totalLiquidityUSD"
  totalLiquidityUSD: BigDecimal!
  "Description for column: activeLiquidity"
  activeLiquidity: BigInt!
  "Description for column: activeLiquidityUSD"
  activeLiquidityUSD: BigDecimal!
  "Description for column: uncollectedProtocolSideTokenAmounts"
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedProtocolSideValuesUSD"
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  "Description for column: uncollectedSupplySideTokenAmounts"
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedSupplySideValuesUSD"
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  "Description for column: cumulativeSupplySideRevenueUSD"
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "Description for column: cumulativeProtocolSideRevenueUSD"
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "Description for column: cumulativeTotalRevenueUSD"
  cumulativeTotalRevenueUSD: BigDecimal!
  "Description for column: cumulativeVolumeByTokenAmount"
  cumulativeVolumeByTokenAmount: [BigInt!]!
  "Description for column: cumulativeVolumeByTokenUSD"
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  "Description for column: cumulativeVolumeUSD"
  cumulativeVolumeUSD: BigDecimal!
  "Description for column: inputTokenBalances"
  inputTokenBalances: [BigInt!]!
  "Description for column: inputTokenBalancesUSD"
  inputTokenBalancesUSD: [BigDecimal!]!
  "Description for column: inputTokenWeights"
  inputTokenWeights: [BigDecimal!]!
  "Description for column: stakedOutputTokenAmount"
  stakedOutputTokenAmount: BigInt
  "Description for column: rewardTokenEmissionsAmount"
  rewardTokenEmissionsAmount: [BigInt!]
  "Description for column: rewardTokenEmissionsUSD"
  rewardTokenEmissionsUSD: [BigDecimal!]
  "Description for column: cumulativeDepositCount"
  cumulativeDepositCount: Int!
  "Description for column: cumulativeWithdrawCount"
  cumulativeWithdrawCount: Int!
  "Description for column: cumulativeSwapCount"
  cumulativeSwapCount: Int!
  "Description for column: positions"
  positions: [Position!]! @derivedFrom(field: "pool")
  "Description for column: positionCount"
  positionCount: Int!
  "Description for column: openPositionCount"
  openPositionCount: Int!
  "Description for column: closedPositionCount"
  closedPositionCount: Int!
  "Description for column: lastSnapshotDayID"
  lastSnapshotDayID: Int!
  "Description for column: lastSnapshotHourID"
  lastSnapshotHourID: Int!
  "Description for column: lastUpdateTimestamp"
  lastUpdateTimestamp: BigInt!
  "Description for column: lastUpdateBlockNumber"
  lastUpdateBlockNumber: BigInt!
  "Description for column: dailySnapshots"
  dailySnapshots: [LiquidityPoolDailySnapshot!]! @derivedFrom(field: "pool")
  "Description for column: hourlySnapshots"
  hourlySnapshots: [LiquidityPoolHourlySnapshot!]! @derivedFrom(field: "pool")
  "Description for column: deposits"
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  "Description for column: withdraws"
  withdraws: [Withdraw!]! @derivedFrom(field: "pool")
  "Description for column: swaps"
  swaps: [Swap!]! @derivedFrom(field: "pool")
}

"Description for table: LiquidityPoolDailySnapshot"
type LiquidityPoolDailySnapshot @entity(immutable: true) @dailySnapshot {
  "Description for column: id"
  id: Bytes!
  "Description for column: day"
  day: Int!
  "Description for column: protocol"
  protocol: DexAmmProtocol!
  "Description for column: pool"
  pool: LiquidityPool!
  "Description for column: tick"
  tick: BigInt
  "Description for column: totalValueLockedUSD"
  totalValueLockedUSD: BigDecimal!
  "Description for column: totalLiquidity"
  totalLiquidity: BigInt!
  "Description for column: totalLiquidityUSD"
  totalLiquidityUSD: BigDecimal!
  "Description for column: activeLiquidity"
  activeLiquidity: BigInt!
  "Description for column: activeLiquidityUSD"
  activeLiquidityUSD: BigDecimal!
  "Description for column: uncollectedProtocolSideTokenAmounts"
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedProtocolSideValuesUSD"
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  "Description for column: uncollectedSupplySideTokenAmounts"
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedSupplySideValuesUSD"
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  "Description for column: cumulativeSupplySideRevenueUSD"
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "Description for column: dailySupplySideRevenueUSD"
  dailySupplySideRevenueUSD: BigDecimal!
  "Description for column: cumulativeProtocolSideRevenueUSD"
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "Description for column: dailyProtocolSideRevenueUSD"
  dailyProtocolSideRevenueUSD: BigDecimal!
  "Description for column: cumulativeTotalRevenueUSD"
  cumulativeTotalRevenueUSD: BigDecimal!
  "Description for column: dailyTotalRevenueUSD"
  dailyTotalRevenueUSD: BigDecimal!
  "Description for column: cumulativeVolumeUSD"
  cumulativeVolumeUSD: BigDecimal!
  "Description for column: dailyVolumeUSD"
  dailyVolumeUSD: BigDecimal!
  "Description for column: cumulativeVolumeByTokenAmount"
  cumulativeVolumeByTokenAmount: [BigInt!]!
  "Description for column: dailyVolumeByTokenAmount"
  dailyVolumeByTokenAmount: [BigInt!]!
  "Description for column: cumulativeVolumeByTokenUSD"
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  "Description for column: dailyVolumeByTokenUSD"
  dailyVolumeByTokenUSD: [BigDecimal!]!
  "Description for column: inputTokenBalances"
  inputTokenBalances: [BigInt!]!
  "Description for column: inputTokenBalancesUSD"
  inputTokenBalancesUSD: [BigDecimal!]!
  "Description for column: inputTokenWeights"
  inputTokenWeights: [BigDecimal!]!
  "Description for column: stakedOutputTokenAmount"
  stakedOutputTokenAmount: BigInt
  "Description for column: rewardTokenEmissionsAmount"
  rewardTokenEmissionsAmount: [BigInt!]
  "Description for column: rewardTokenEmissionsUSD"
  rewardTokenEmissionsUSD: [BigDecimal!]
  "Description for column: cumulativeDepositCount"
  cumulativeDepositCount: Int!
  "Description for column: dailyDepositCount"
  dailyDepositCount: Int!
  "Description for column: cumulativeWithdrawCount"
  cumulativeWithdrawCount: Int!
  "Description for column: dailyWithdrawCount"
  dailyWithdrawCount: Int!
  "Description for column: cumulativeSwapCount"
  cumulativeSwapCount: Int!
  "Description for column: dailySwapCount"
  dailySwapCount: Int!
  "Description for column: positionCount"
  positionCount: Int!
  "Description for column: openPositionCount"
  openPositionCount: Int!
  "Description for column: closedPositionCount"
  closedPositionCount: Int!
  "Description for column: timestamp"
  timestamp: BigInt!
  "Description for column: blockNumber"
  blockNumber: BigInt!
}

"Description for table: LiquidityPoolHourlySnapshot"
type LiquidityPoolHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  "Description for column: id"
  id: Bytes!
  "Description for column: hour"
  hour: Int!
  "Description for column: protocol"
  protocol: DexAmmProtocol!
  "Description for column: pool"
  pool: LiquidityPool!
  "Description for column: tick"
  tick: BigInt
  "Description for column: totalValueLockedUSD"
  totalValueLockedUSD: BigDecimal!
  "Description for column: totalLiquidity"
  totalLiquidity: BigInt!
  "Description for column: totalLiquidityUSD"
  totalLiquidityUSD: BigDecimal!
  "Description for column: activeLiquidity"
  activeLiquidity: BigInt!
  "Description for column: activeLiquidityUSD"
  activeLiquidityUSD: BigDecimal!
  "Description for column: uncollectedProtocolSideTokenAmounts"
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedProtocolSideValuesUSD"
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  "Description for column: uncollectedSupplySideTokenAmounts"
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  "Description for column: uncollectedSupplySideValuesUSD"
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  "Description for column: cumulativeSupplySideRevenueUSD"
  cumulativeSupplySideRevenueUSD: BigDecimal!
  "Description for column: hourlySupplySideRevenueUSD"
  hourlySupplySideRevenueUSD: BigDecimal!
  "Description for column: cumulativeProtocolSideRevenueUSD"
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  "Description for column: hourlyProtocolSideRevenueUSD"
  hourlyProtocolSideRevenueUSD: BigDecimal!
  "Description for column: cumulativeTotalRevenueUSD"
  cumulativeTotalRevenueUSD: BigDecimal!
  "Description for column: hourlyTotalRevenueUSD"
  hourlyTotalRevenueUSD: BigDecimal!
  "Description for column: cumulativeVolumeUSD"
  cumulativeVolumeUSD: BigDecimal!
  "Description for column: hourlyVolumeUSD"
  hourlyVolumeUSD: BigDecimal!
  "Description for column: cumulativeVolumeByTokenAmount"
  cumulativeVolumeByTokenAmount: [BigInt!]!
  "Description for column: hourlyVolumeByTokenAmount"
  hourlyVolumeByTokenAmount: [BigInt!]!
  "Description for column: cumulativeVolumeByTokenUSD"
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  "Description for column: hourlyVolumeByTokenUSD"
  hourlyVolumeByTokenUSD: [BigDecimal!]!
  "Description for column: inputTokenBalances"
  inputTokenBalances: [BigInt!]!
  "Description for column: inputTokenBalancesUSD"
  inputTokenBalancesUSD: [BigDecimal!]!
  "Description for column: inputTokenWeights"
  inputTokenWeights: [BigDecimal!]!
  "Description for column: stakedOutputTokenAmount"
  stakedOutputTokenAmount: BigInt
  "Description for column: rewardTokenEmissionsAmount"
  rewardTokenEmissionsAmount: [BigInt!]
  "Description for column: rewardTokenEmissionsUSD"
  rewardTokenEmissionsUSD: [BigDecimal!]
  "Description for column: cumulativeDepositCount"
  cumulativeDepositCount: Int!
  "Description for column: hourlyDepositCount"
  hourlyDepositCount: Int!
  "Description for column: cumulativeWithdrawCount"
  cumulativeWithdrawCount: Int!
  "Description for column: hourlyWithdrawCount"
  hourlyWithdrawCount: Int!
  "Description for column: cumulativeSwapCount"
  cumulativeSwapCount: Int!
  "Description for column: hourlySwapCount"
  hourlySwapCount: Int!
  "Description for column: positionCount"
  positionCount: Int!
  "Description for column: openPositionCount"
  openPositionCount: Int!
  "Description for column: closedPositionCount"
  closedPositionCount: Int!
  "Description for column: timestamp"
  timestamp: BigInt!
  "Description for column: blockNumber"
  blockNumber: BigInt!
}

"Represents a tick in a liquidity pool, capturing various metrics and timestamps."
type Tick @entity @regularPolling {
  "Unique identifier for the tick, represented as a byte array."
  id: Bytes!
  "Index of the tick within the liquidity pool."
  index: BigInt!
  "Reference to the associated liquidity pool."
  pool: LiquidityPool!
  "Timestamp indicating when the tick was created, in seconds since the Unix epoch."
  createdTimestamp: BigInt!
  "Block number at which the tick was created."
  createdBlockNumber: BigInt!
  "Array of prices associated with the tick, represented as decimal values."
  prices: [BigDecimal!]!
  "Gross liquidity value of the tick, measured in the smallest unit of the currency."
  liquidityGross: BigInt!
  "Gross liquidity value of the tick, converted to USD."
  liquidityGrossUSD: BigDecimal!
  "Net liquidity value of the tick, measured in the smallest unit of the currency."
  liquidityNet: BigInt!
  "Net liquidity value of the tick, converted to USD."
  liquidityNetUSD: BigDecimal!
  "Identifier for the last daily snapshot that included this tick."
  lastSnapshotDayID: Int!
  "Identifier for the last hourly snapshot that included this tick."
  lastSnapshotHourID: Int!
  "Timestamp of the last update to the tick, in seconds since the Unix epoch."
  lastUpdateTimestamp: BigInt!
  "Block number at which the last update to the tick occurred."
  lastUpdateBlockNumber: BigInt!
}

"Represents a daily snapshot of tick data, capturing various liquidity metrics and associated metadata."
type TickDailySnapshot @entity(immutable: true) @dailySnapshot {
  "Unique identifier for the snapshot, stored as a byte array."
  id: Bytes!
  "The day number for which the snapshot is taken, represented as an integer."
  day: Int!
  "Reference to the tick associated with this snapshot."
  tick: Tick!
  "Reference to the liquidity pool associated with this snapshot."
  pool: LiquidityPool!
  "Total gross liquidity available, represented as a big integer."
  liquidityGross: BigInt!
  "Total gross liquidity available, converted to USD, represented as a decimal."
  liquidityGrossUSD: BigDecimal!
  "Net liquidity available, represented as a big integer."
  liquidityNet: BigInt!
  "Net liquidity available, converted to USD, represented as a decimal."
  liquidityNetUSD: BigDecimal!
  "Timestamp indicating when the snapshot was recorded, represented as a big integer."
  timestamp: BigInt!
  "Block number at which the snapshot was recorded, represented as a big integer."
  blockNumber: BigInt!
}

"Represents an immutable hourly snapshot of tick data within a liquidity pool."
type TickHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  "Unique identifier for the snapshot."
  id: Bytes!
  "The hour during which the snapshot was taken."
  hour: Int!
  "Reference to the tick associated with this snapshot."
  tick: Tick!
  "Reference to the liquidity pool associated with this snapshot."
  pool: LiquidityPool!
  "Total gross liquidity at the time of the snapshot."
  liquidityGross: BigInt!
  "Total gross liquidity in USD at the time of the snapshot."
  liquidityGrossUSD: BigDecimal!
  "Net liquidity at the time of the snapshot."
  liquidityNet: BigInt!
  "Net liquidity in USD at the time of the snapshot."
  liquidityNetUSD: BigDecimal!
  "Timestamp indicating when the snapshot was recorded."
  timestamp: BigInt!
  "Block number at which the snapshot was recorded."
  blockNumber: BigInt!
}

"Represents an account entity with various activity metrics and related entities."
type Account @entity @regularPolling {
  "Unique identifier for the account, represented as a byte array."
  id: Bytes!
  "Total number of positions associated with the account."
  positionCount: Int!
  "List of positions linked to the account, derived from the 'account' field in the Position entity."
  positions: [Position!]! @derivedFrom(field: "account")
  "Number of currently open positions for the account."
  openPositionCount: Int!
  "Number of positions that have been closed for the account."
  closedPositionCount: Int!
  "Total number of deposits made to the account."
  depositCount: Int!
  "List of deposits associated with the account, derived from the 'account' field in the Deposit entity."
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Total number of withdrawals made from the account."
  withdrawCount: Int!
  "List of withdrawals associated with the account, derived from the 'account' field in the Withdraw entity."
  withdraws: [Withdraw!]! @derivedFrom(field: "account")
  "Total number of swaps executed by the account."
  swapCount: Int!
  "List of swaps associated with the account, derived from the 'account' field in the Swap entity."
  swaps: [Swap!]! @derivedFrom(field: "account")
}

"Represents a financial position within a liquidity pool, tracking various metrics and states."
type Position @entity @regularPolling {
  "Unique identifier for the position."
  id: Bytes!
  "Account associated with the position."
  account: Account!
  "Liquidity pool in which the position is held."
  pool: LiquidityPool!
  "Hash of the transaction when the position was opened."
  hashOpened: Bytes!
  "Hash of the transaction when the position was closed, if applicable."
  hashClosed: Bytes
  "Block number at which the position was opened."
  blockNumberOpened: BigInt!
  "Timestamp when the position was opened."
  timestampOpened: BigInt!
  "Block number at which the position was closed, if applicable."
  blockNumberClosed: BigInt
  "Timestamp when the position was closed, if applicable."
  timestampClosed: BigInt
  "Lower tick boundary of the position."
  tickLower: Tick
  "Upper tick boundary of the position."
  tickUpper: Tick
  "Token representing the liquidity provided in the position."
  liquidityToken: Token
  "Type of the liquidity token."
  liquidityTokenType: TokenType
  "Amount of liquidity provided in the position."
  liquidity: BigInt!
  "Value of the liquidity in USD."
  liquidityUSD: BigDecimal!
  "Cumulative amounts of tokens deposited into the position."
  cumulativeDepositTokenAmounts: [BigInt!]!
  "Cumulative value of deposits in USD."
  cumulativeDepositUSD: BigDecimal!
  "Cumulative amounts of tokens withdrawn from the position."
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  "Cumulative value of withdrawals in USD."
  cumulativeWithdrawUSD: BigDecimal!
  "Cumulative rewards earned in USD, if any."
  cumulativeRewardUSD: [BigInt!]
  "Number of deposit transactions made to the position."
  depositCount: Int!
  "List of deposit transactions associated with the position."
  deposits: [Deposit!]! @derivedFrom(field: "position")
  "Number of withdrawal transactions made from the position."
  withdrawCount: Int!
  "List of withdrawal transactions associated with the position."
  withdraws: [Withdraw!]! @derivedFrom(field: "position")
  "Snapshots capturing the state of the position at various points in time."
  snapshots: [PositionSnapshot!]! @derivedFrom(field: "position")
}

"Description for table: PositionSnapshot"
type PositionSnapshot @entity(immutable: true) @hourlySnapshot {
  "Unique identifier for the position snapshot, stored as a byte array."
  id: Bytes!
  "Hash value associated with the position snapshot, stored as a byte array."
  hash: Bytes!
  "Index of the log entry within the block, represented as an integer."
  logIndex: Int!
  "Nonce value for the transaction, represented as a big integer."
  nonce: BigInt!
  "Reference to the associated position entity."
  position: Position!
  "Type of liquidity token involved in the position, defined by the TokenType enum."
  liquidityTokenType: TokenType
  "Amount of liquidity in the position, represented as a big integer."
  liquidity: BigInt
  "Value of the liquidity in USD, represented as a big decimal."
  liquidityUSD: BigDecimal
  "Cumulative amounts of deposit tokens, stored as an array of big integers."
  cumulativeDepositTokenAmounts: [BigInt!]!
  "Total value of all deposits in USD, represented as a big decimal."
  cumulativeDepositUSD: BigDecimal!
  "Cumulative amounts of withdrawn tokens, stored as an array of big integers."
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  "Total value of all withdrawals in USD, represented as a big decimal."
  cumulativeWithdrawUSD: BigDecimal!
  "Cumulative amounts of reward tokens, stored as an array of big integers."
  cumulativeRewardTokenAmounts: [BigInt!]
  "Total value of all rewards in USD, stored as an array of big integers."
  cumulativeRewardUSD: [BigInt!]
  "Number of deposit transactions recorded."
  depositCount: Int!
  "Number of withdrawal transactions recorded."
  withdrawCount: Int!
  "Block number in which the snapshot was recorded, represented as a big integer."
  blockNumber: BigInt!
  "Timestamp of when the snapshot was taken, represented as a big integer."
  timestamp: BigInt!
}

"Represents a deposit transaction within the system."
type Deposit @entity(immutable: true) @transaction {
  "Unique identifier for the deposit, represented as a byte array."
  id: Bytes!
  "Hash of the transaction associated with the deposit, stored as a byte array."
  hash: Bytes!
  "Sequential number of the transaction, used to prevent replay attacks."
  nonce: BigInt!
  "Index of the log entry within the block, indicating the order of events."
  logIndex: Int!
  "Maximum amount of gas that can be used for the transaction, if specified."
  gasLimit: BigInt
  "Actual amount of gas used by the transaction, if available."
  gasUsed: BigInt
  "Price per unit of gas for the transaction, if specified."
  gasPrice: BigInt
  "Reference to the decentralized exchange or automated market maker protocol involved in the deposit."
  protocol: DexAmmProtocol!
  "Account associated with the deposit transaction."
  account: Account!
  "Position related to the deposit, if applicable."
  position: Position
  "Liquidity pool involved in the deposit transaction."
  pool: LiquidityPool!
  "Lower tick boundary for the liquidity position, if applicable."
  tickLower: BigInt
  "Upper tick boundary for the liquidity position, if applicable."
  tickUpper: BigInt
  "Block number in which the transaction was included."
  blockNumber: BigInt!
  "Timestamp indicating when the transaction was processed."
  timestamp: BigInt!
  "Amount of liquidity added to the pool as part of the deposit."
  liquidity: BigInt!
  "List of tokens deposited in the transaction."
  inputTokens: [Token!]!
  "Amounts of each input token deposited."
  inputTokenAmounts: [BigInt!]!
  "Amounts of tokens reserved in the pool after the deposit, if available."
  reserveAmounts: [BigInt!]
  "Total value of the deposit in USD."
  amountUSD: BigDecimal!
}

"Represents a withdrawal transaction in a decentralized exchange automated market maker protocol."
type Withdraw @entity(immutable: true) @transaction {
  "Unique identifier for the withdrawal transaction, represented as a byte array."
  id: Bytes!
  "Hash of the transaction, used to uniquely identify it on the blockchain."
  hash: Bytes!
  "Nonce value associated with the transaction, ensuring uniqueness and order."
  nonce: BigInt!
  "Index of the log entry within the block, indicating the transaction's position."
  logIndex: Int!
  "Maximum amount of gas that can be used for the transaction execution."
  gasLimit: BigInt
  "Actual amount of gas used during the transaction execution."
  gasUsed: BigInt
  "Price per unit of gas paid for the transaction, measured in the smallest currency unit."
  gasPrice: BigInt
  "Protocol associated with the withdrawal, linking to the decentralized exchange automated market maker."
  protocol: DexAmmProtocol!
  "Account initiating the withdrawal transaction."
  account: Account!
  "Position associated with the withdrawal, if applicable."
  position: Position
  "Lower tick boundary for the liquidity position being withdrawn."
  tickLower: BigInt
  "Upper tick boundary for the liquidity position being withdrawn."
  tickUpper: BigInt
  "Liquidity pool from which the withdrawal is made."
  pool: LiquidityPool!
  "Block number in which the transaction was included."
  blockNumber: BigInt!
  "Timestamp of when the transaction was processed, in seconds since the Unix epoch."
  timestamp: BigInt!
  "Amount of liquidity being withdrawn from the pool."
  liquidity: BigInt!
  "List of tokens being withdrawn as part of the transaction."
  inputTokens: [Token!]!
  "Amounts of each input token being withdrawn."
  inputTokenAmounts: [BigInt!]!
  "Amounts of tokens reserved in the pool after the withdrawal."
  reserveAmounts: [BigInt!]
  "Total value of the withdrawal transaction, denominated in USD."
  amountUSD: BigDecimal!
}

"Represents a swap transaction in a decentralized exchange or automated market maker protocol."
type Swap @entity(immutable: true) @transaction {
  "Unique identifier for the swap transaction."
  id: Bytes!
  "Hash of the transaction containing the swap."
  hash: Bytes!
  "Nonce of the transaction, used to ensure uniqueness."
  nonce: BigInt!
  "Index of the log entry within the transaction."
  logIndex: Int!
  "Maximum amount of gas that can be used for the transaction."
  gasLimit: BigInt
  "Actual amount of gas used by the transaction."
  gasUsed: BigInt
  "Price of gas at the time of the transaction."
  gasPrice: BigInt
  "Protocol used for the swap transaction."
  protocol: DexAmmProtocol!
  "Account that initiated the swap transaction."
  account: Account!
  "Liquidity pool involved in the swap transaction."
  pool: LiquidityPool!
  "Block number in which the transaction was included."
  blockNumber: BigInt!
  "Timestamp of when the transaction was processed."
  timestamp: BigInt!
  "Current tick of the pool at the time of the swap."
  tick: BigInt
  "Token being swapped into the pool."
  tokenIn: Token!
  "Amount of the input token being swapped."
  amountIn: BigInt!
  "USD value of the input token amount."
  amountInUSD: BigDecimal!
  "Token being swapped out of the pool."
  tokenOut: Token!
  "Amount of the output token received from the swap."
  amountOut: BigInt!
  "USD value of the output token amount."
  amountOutUSD: BigDecimal!
  "Array of reserve amounts for each token in the pool after the swap."
  reserveAmounts: [BigInt!]
}

"Represents an account that is active and cannot be modified once created."
type ActiveAccount @entity(immutable: true) {
  "A unique identifier for the active account, represented as a non-nullable byte array."
  id: Bytes!
}

"Represents the amount details of a liquidity pool."
type _LiquidityPoolAmount @entity {
  "Unique identifier for the liquidity pool amount entry, represented as a byte array."
  id: Bytes!
  "List of tokens that are input into the liquidity pool."
  inputTokens: [Token!]!
  "Balances of each input token in the liquidity pool, represented as decimal values."
  inputTokenBalances: [BigDecimal!]!
  "Current prices of the tokens in the liquidity pool, represented as decimal values."
  tokenPrices: [BigDecimal!]!
}

"Entity representing a helper store with various data types."
type _HelperStore @entity {
  "Unique identifier for the helper store, represented as bytes."
  id: Bytes!
  "List of decimal values associated with the helper store."
  valueDecimalList: [BigDecimal!]
  "Single decimal value associated with the helper store."
  valueDecimal: BigDecimal
  "Integer value associated with the helper store."
  valueInt: Int
}

"Represents a whitelist of tokens associated with specific liquidity pools."
type _TokenWhitelist @entity {
  "Unique identifier for the token whitelist entry, represented as bytes."
  id: Bytes!
  "List of liquidity pools that are whitelisted for this token."
  whitelistPools: [LiquidityPool!]!
}

"Represents a token that is whitelisted, identified by its unique symbol."
type _TokenWhitelistSymbol @entity(immutable: true) {
  "Unique identifier for the token whitelist symbol."
  id: ID!
  "Blockchain address associated with the token whitelist symbol."
  address: Bytes!
}